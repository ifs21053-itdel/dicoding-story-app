import{precacheAndRoute,cleanupOutdatedCaches}from"workbox-precaching";import{registerRoute}from"workbox-routing";import{StaleWhileRevalidate,CacheFirst,NetworkFirst}from"workbox-strategies";import{ExpirationPlugin}from"workbox-expiration";import{CacheableResponsePlugin}from"workbox-cacheable-response";const CACHE_VERSION="v1",CACHE_NAMES={static:"static-v1",images:"images-v1",api:"api-v1",pages:"pages-v1",offline:"offline-v1"},APP_SHELL_FILES=["/","/index.html","/app.webmanifest","/favicon.png","/images/logo.png"];precacheAndRoute([...self.__WB_MANIFEST||[],...APP_SHELL_FILES.map((e=>({url:e,revision:"v1"})))]),cleanupOutdatedCaches(),registerRoute((({request:e})=>e.url.includes("story-api.dicoding.dev")),new StaleWhileRevalidate({cacheName:CACHE_NAMES.api,plugins:[new CacheableResponsePlugin({statuses:[0,200]}),new ExpirationPlugin({maxAgeSeconds:3600})]})),registerRoute((({request:e})=>"image"===e.destination),new CacheFirst({cacheName:CACHE_NAMES.images,plugins:[new CacheableResponsePlugin({statuses:[0,200]}),new ExpirationPlugin({maxEntries:50,maxAgeSeconds:2592e3})]})),registerRoute((({request:e})=>"document"===e.destination),new NetworkFirst({cacheName:CACHE_NAMES.pages,plugins:[new CacheableResponsePlugin({statuses:[0,200]})]})),registerRoute((({request:e})=>"script"===e.destination||"style"===e.destination||"font"===e.destination),new CacheFirst({cacheName:CACHE_NAMES.static,plugins:[new CacheableResponsePlugin({statuses:[0,200]}),new ExpirationPlugin({maxEntries:30,maxAgeSeconds:2592e3})]}));const mainPageStrategy=new NetworkFirst({cacheName:CACHE_NAMES.pages,plugins:[new CacheableResponsePlugin({statuses:[0,200]})]});registerRoute(/\/$|\/index.html$/,mainPageStrategy);const createOfflineFallbackResponse=async()=>{const e=await caches.open(CACHE_NAMES.pages);return await e.match("/index.html")||Response.error()};self.addEventListener("fetch",(e=>{"navigate"===e.request.mode&&e.respondWith(fetch(e.request).catch((()=>createOfflineFallbackResponse())))})),self.addEventListener("push",(e=>{console.log("Push notification received:",e);let t={title:"Dicoding Story",options:{body:"You have a new notification",icon:"/images/icons/icon-192x192.png",badge:"/images/icons/icon-192x192.png",tag:"dicoding-story-notification",data:{url:"/home"}}};if(e.data)try{const i=e.data.json();console.log("Push data received:",i),t={title:i.title||"Dicoding Story",options:{body:i.options?.body||i.body||"You have a new notification",icon:i.options?.icon||"/images/icons/icon-192x192.png",badge:i.options?.badge||"/images/icons/icon-192x192.png",tag:i.options?.tag||"dicoding-story-notification",data:i.options?.data||{url:"/home"},actions:i.options?.actions||[{action:"view",title:"View Story"},{action:"close",title:"Close"}]}}}catch(e){console.error("Error parsing push data:",e)}e.waitUntil(self.registration.showNotification(t.title,t.options))})),self.addEventListener("notificationclick",(e=>{console.log("Notification clicked:",e),e.notification.close();const t=e.action,i=e.notification.data||{};if("close"===t)return;const n=i.url?new URL(i.url,self.location.origin).href:self.location.origin;e.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then((e=>{for(let t=0;t<e.length;t++){const i=e[t];if(i.url===n&&"focus"in i)return i.focus()}if(clients.openWindow)return clients.openWindow(n)})))})),self.addEventListener("notificationclose",(e=>{console.log("Notification closed:",e),e.waitUntil(Promise.resolve())})),self.addEventListener("pushsubscriptionchange",(e=>{console.log("Push subscription changed:",e),e.waitUntil(self.registration.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:"BCCs2eonMI-6H2ctvFaWg-UYdDv387Vno_bzUzALpB442r2lCnsHmtrx8biyPi_E-1fSGABK_Qs_GlvPoJJqxbk"}).then((e=>fetch("/api/notifications/subscribe",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({subscription:e})}))))})),self.addEventListener("message",(e=>{if(e.data&&"SKIP_WAITING"===e.data.type&&self.skipWaiting(),e.data&&"CLIENTS_CLAIM"===e.data.type&&self.clients.claim(),e.data&&"SHOW_NOTIFICATION"===e.data.type){const{title:t,options:i}=e.data;self.registration.showNotification(t,{body:i.body,icon:i.icon||"/images/icons/icon-192x192.png",badge:"/images/icons/icon-192x192.png",tag:"manual-notification",...i})}})),self.addEventListener("sync",(e=>{console.log("Sync event triggered:",e.tag),"sync-new-story"===e.tag&&(console.log("Syncing new stories created while offline..."),e.waitUntil(caches.open("offline-posts").then((e=>e.keys().then((t=>0===t.length?(console.log("No offline data to sync"),Promise.resolve()):Promise.all(t.map((t=>e.match(t).then((e=>e.json())).then((i=>(console.log("Syncing data:",i),fetch("https://story-api.dicoding.dev/v1/stories",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${i.token}`},body:JSON.stringify(i.formData)}).then((i=>{if(i.ok)return console.log("Successfully synced story"),e.delete(t);throw new Error("Failed to sync")})))))))))).then((()=>{self.clients.matchAll().then((e=>{e.forEach((e=>{e.postMessage({type:"SYNC_COMPLETED",message:"Data offline berhasil disinkronkan"})}))}))}))))))}));